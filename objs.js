const objs = {
	colors: [
		[252, 252, 252],
		[220, 96, 0],
		[0, 133, 0],
		[176, 0, 0],
		[10, 10, 176],
		[252, 252, 0],
		[16, 16, 16]
	]
};

msg_display.textContent += ': ./';

async function fetchOBJ(filePath) {
	try {
		const response = await fetch(filePath);
		if (!response.ok) {
			msg_display.textContent += '\n' + response.status;
			throw new Error(response.status);
		}
		msg_display.textContent += '\n' + response.status;
		return await response.text();
	} catch (error) {
		console.error(error);
	}
}

function parseOBJ(text) {
	const lines = text.split('\n');
	const vertices = [];
	const groups = {};
	let currentGroup = 'default';
	lines.forEach(line => {
		const parts = line.trim().split(/\s+/);
		const type = parts[0];
		switch (type) {
			case 'v':
				vertices.push(parts.slice(1).map(Number));
				break;
			case 'g':
				currentGroup = parts[1];
				if (!groups[currentGroup]) groups[currentGroup] = [];
				break;
			case 'f':
				const face = parts.slice(1).map(p => parseInt(p.split('/')[0], 10) - 1);
				groups[currentGroup].push(face);
				break;
		}
	});

	return { vertices, groups };
}

[
	['./obj_files/cube_core.obj', 'core'],
	['./obj_files/cube_center.obj', 'center'],
	['./obj_files/cube_edge.obj', 'edge'],
	['./obj_files/cube_corner.obj', 'corner']
].forEach(link => {
	fetchOBJ(link[0]).then(obj_txt => {
		if (obj_txt) objs[link[1]] = parseOBJ(obj_txt);
	});
});

/*
[
	[
		'core',
		`
			# cube core
			
			v -1.00 1.00 -1.00
			v 1.00 1.00 -1.00
			v 1.00 1.00 1.00
			v -1.00 1.00 1.00
			v -1.00 -1.00 1.00
			v 1.00 -1.00 1.00
			v 1.00 -1.00 -1.00
			v -1.00 -1.00 -1.00
			
			g 0
			f 1 3 2
			f 1 4 3
			f 5 7 6
			f 5 8 7
			f 4 6 3
			f 4 5 6
			f 2 8 1
			f 2 7 8
			f 1 5 4
			f 1 8 5
			f 3 7 2
			f 3 6 7
		`
	],
	[
		'center',
		`
			# cube center
			
			v -0.40 1.10 -0.90
			v 0.40 1.10 -0.90
			v 0.53 1.10 -0.85
			v 0.72 1.10 -0.72
			v 0.85 1.10 -0.53
			v 0.90 1.10 -0.40
			v 0.90 1.10 0.40
			v 0.85 1.10 0.53
			v 0.72 1.10 0.72
			v 0.53 1.10 0.85
			v 0.40 1.10 0.90
			v -0.40 1.10 0.90
			v -0.53 1.10 0.85
			v -0.72 1.10 0.72
			v -0.85 1.10 0.53
			v -0.90 1.10 0.40
			v -0.90 1.10 -0.40
			v -0.85 1.10 -0.53
			v -0.72 1.10 -0.72
			v -0.53 1.10 -0.85
			v -0.40 1.00 -1.00
			v 0.40 1.00 -1.00
			v 1.00 1.00 -0.40
			v 1.00 1.00 0.40
			v 0.40 1.00 1.00
			v -0.40 1.00 1.00
			v -1.00 1.00 0.40
			v -1.00 1.00 -0.40
			v 0.63 1.00 -0.95
			v -0.63 1.00 -0.95
			v 0.95 1.00 0.63
			v 0.95 1.00 -0.63
			v -0.63 1.00 0.95
			v 0.63 1.00 0.95
			v -0.95 1.00 -0.63
			v -0.95 1.00 0.63
			v -0.82 1.00 -0.82
			v 0.82 1.00 -0.82
			v 0.82 1.00 0.82
			v -0.82 1.00 0.82
			v -0.40 -1.00 -1.00
			v 0.40 -1.00 -1.00
			v 0.63 -1.00 -0.95
			v 0.82 -1.00 -0.82
			v 0.95 -1.00 -0.63
			v 1.00 -1.00 -0.40
			v 1.00 -1.00 0.40
			v 0.95 -1.00 0.63
			v 0.95 -1.00 0.63
			v 0.82 -1.00 0.82
			v 0.63 -1.00 0.95
			v 0.40 -1.00 1.00
			v -0.40 -1.00 1.00
			v -0.63 -1.00 0.95
			v -0.82 -1.00 0.82
			v -0.95 -1.00 0.63
			v -1.00 -1.00 0.40
			v -1.00 -1.00 -0.40
			v -0.95 -1.00 -0.63
			v -0.82 -1.00 -0.82
			v -0.63 -1.00 -0.95
			
			g 0
			f 21 42 41
			f 21 22 42
			f 22 43 42
			f 22 29 43
			f 29 44 43
			f 29 38 44
			f 38 45 44
			f 38 32 45
			f 32 46 45
			f 32 23 46
			f 23 47 46
			f 23 24 47
			f 24 48 47
			f 24 31 48
			f 31 50 49
			f 31 39 50
			f 39 51 50
			f 39 34 51
			f 34 52 51
			f 34 25 52
			f 25 53 52
			f 25 26 53
			f 26 54 53
			f 26 33 54
			f 33 55 54
			f 33 40 55
			f 40 56 55
			f 40 36 56
			f 36 57 56
			f 36 27 57
			f 27 58 57
			f 27 28 58
			f 28 59 58
			f 28 35 59
			f 35 60 59
			f 35 37 60
			f 37 61 60
			f 37 30 61
			f 30 41 61
			f 30 21 41
			
			g 1
			f 1 3 2
			f 1 4 3
			f 1 5 4
			f 1 6 5
			f 1 7 6
			f 1 8 7
			f 1 9 8
			f 1 10 9
			f 1 11 10
			f 1 12 11
			f 1 13 12
			f 1 14 13
			f 1 15 14
			f 1 16 15
			f 1 17 16
			f 1 18 17
			f 1 19 18
			f 1 20 19
			f 21 2 22
			f 21 1 2
			f 23 7 24
			f 23 6 7
			f 25 12 26
			f 25 11 12
			f 27 17 28
			f 27 16 17
			f 22 3 29
			f 22 2 3
			f 30 1 21
			f 30 20 1
			f 24 8 31
			f 24 7 8
			f 32 6 23
			f 32 5 6
			f 26 13 33
			f 26 12 13
			f 34 11 25
			f 34 10 11
			f 28 18 35
			f 28 17 18
			f 36 16 27
			f 36 15 16
			f 37 20 30
			f 37 19 20
			f 29 4 38
			f 29 3 4
			f 39 10 34
			f 39 9 10
			f 33 14 40
			f 33 13 14
			f 35 19 37
			f 35 18 19
			f 38 5 32
			f 38 4 5
			f 31 9 39
			f 31 8 9
			f 40 15 36
			f 40 14 15
		`
	],
	[
		'edge',
		`
			# cube edge
			
			v -0.90 0.90 1.10
			v 0.90 0.90 1.10
			v 0.90 -0.53 1.10
			v 0.78 -0.70 1.10
			v 0.58 -0.83 1.10
			v 0.30 -0.90 1.10
			v -0.30 -0.90 1.10
			v -0.58 -0.83 1.10
			v -0.78 -0.70 1.10
			v -0.90 -0.53 1.10
			v -0.90 1.10 0.90
			v -0.90 1.10 -0.53
			v -0.78 1.10 -0.70
			v -0.58 1.10 -0.83
			v -0.30 1.10 -0.90
			v 0.30 1.10 -0.90
			v 0.58 1.10 -0.83
			v 0.78 1.10 -0.70
			v 0.90 1.10 -0.53
			v 0.90 1.10 0.90
			v -1.00 1.00 1.00
			v 1.00 1.00 1.00
			v 1.00 -0.63 1.00
			v 0.88 -0.80 1.00
			v 0.68 -0.93 1.00
			v 0.40 -1.00 1.00
			v -0.40 -1.00 1.00
			v -0.68 -0.93 1.00
			v -0.88 -0.80 1.00
			v -1.00 -0.63 1.00
			v -1.00 1.00 -0.63
			v -0.88 1.00 -0.80
			v -0.68 1.00 -0.93
			v -0.40 1.00 -1.00
			v 0.40 1.00 -1.00
			v 0.68 1.00 -0.93
			v 0.88 1.00 -0.80
			v 1.00 1.00 -0.63
			v 1.00 -0.63 -0.63
			v 0.88 -0.80 -0.80
			v 0.68 -0.93 -0.93
			v 0.40 -1.00 -1.00
			v -1.00 -0.63 -0.63
			v -0.88 -0.80 -0.80
			v -0.68 -0.93 -0.93
			v -0.40 -1.00 -1.00
			
			g 0
			f 22 39 38
			f 22 23 39
			f 38 40 37
			f 38 39 40
			f 23 40 39
			f 23 24 40
			f 37 41 36
			f 37 40 41
			f 24 41 40
			f 24 25 41
			f 36 42 35
			f 36 41 42
			f 25 42 41
			f 25 26 42
			f 31 30 21
			f 31 43 30
			f 32 43 31
			f 32 44 43
			f 43 29 30
			f 43 44 29
			f 33 44 32
			f 33 45 44
			f 44 28 29
			f 44 45 28
			f 34 45 33
			f 34 46 45
			f 45 27 28
			f 45 46 27
			f 27 42 26
			f 27 46 42
			f 35 46 34
			f 35 42 46
			
			g 1
			f 1 3 2
			f 1 4 3
			f 1 5 4
			f 1 6 5
			f 1 7 6
			f 1 8 7
			f 1 9 8
			f 1 10 9
			f 21 2 22
			f 21 1 2
			f 22 3 23
			f 22 2 3
			f 23 4 24
			f 23 3 4
			f 24 5 25
			f 24 4 5
			f 25 6 26
			f 25 5 6
			f 26 7 27
			f 26 6 7
			f 27 8 28
			f 27 7 8
			f 28 9 29
			f 28 8 9
			f 29 10 30
			f 29 9 10
			f 30 1 21
			f 30 10 1
			
			g 2
			f 11 13 12
			f 11 14 13
			f 11 15 14
			f 11 16 15
			f 11 17 16
			f 11 18 17
			f 11 19 18
			f 11 20 19
			f 21 12 31
			f 21 11 12
			f 31 13 32
			f 31 12 13
			f 32 14 33
			f 32 13 14
			f 33 15 34
			f 33 14 15
			f 34 16 35
			f 34 15 16
			f 35 17 36
			f 35 16 17
			f 36 18 37
			f 36 17 18
			f 37 19 38
			f 37 18 19
			f 38 20 22
			f 38 19 20
			f 22 11 21
			f 22 20 11
		`
	],
	[
		'corner',
		`
			# cube corner
			
			v -0.90 0.90 1.10
			v 0.90 0.90 1.10
			v 0.90 -0.90 1.10
			v -0.90 -0.90 1.10
			v -1.00 1.00 1.00
			v 1.00 1.00 1.00
			v 1.00 -1.00 1.00
			v -1.00 -1.00 1.00
			v 1.10 0.90 0.90
			v 1.10 0.90 -0.90
			v 1.10 -0.90 -0.90
			v 1.10 -0.90 0.90
			v 1.00 1.00 -1.00
			v 1.00 -1.00 -1.00
			v -0.90 1.10 -0.90
			v 0.90 1.10 -0.90
			v 0.90 1.10 0.90
			v -0.90 1.10 0.90
			v -1.00 1.00 -1.00
			v -1.00 -1.00 -1.00
			
			g 0
			f 19 8 5
			f 19 20 8
			f 8 14 7
			f 8 20 14
			f 14 19 13
			f 14 20 19
			
			g 1
			f 1 3 2
			f 1 4 3
			f 5 2 6
			f 5 1 2
			f 6 3 7
			f 6 2 3
			f 7 4 8
			f 7 3 4
			f 8 1 5
			f 8 4 1
			
			g 2
			f 9 11 10
			f 9 12 11
			f 6 10 13
			f 6 9 10
			f 13 11 14
			f 13 10 11
			f 14 12 7
			f 14 11 12
			f 7 9 6
			f 7 12 9
			
			g 3
			f 15 17 16
			f 15 18 17
			f 19 16 13
			f 19 15 16
			f 13 17 6
			f 13 16 17
			f 6 18 5
			f 6 17 18
			f 5 15 19
			f 5 18 15
		`
	]
].forEach(o => {
	objs[o[0]] = parseOBJ(o[1]);
});
*/